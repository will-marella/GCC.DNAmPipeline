# Running local GCC.DNAmPipeline
library(R.utils) # Wouldn't be a required import -- would be on Calen to use
library(ggplot2)
library(minfi)
library(dplyr)
library(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
library(tidyr)
library(wateRmelon)
library(patchwork)
library(mclust)
library(ChAMP)
library(Biobase)
library(quantro)
library(pcaMethods)
library(tibble)
library(ewastools)
library(doParallel)
library(foreach)
library(GCC.DNAmPipeline)

idat_dir <- "/Users/williammarella/Desktop/DNAmPreProc/Data/IDAT"

# Getting the rgSet, rgSet_extended
rgSet <- read.metharray.exp(idat_dir)
rgSet_extended <- read.metharray.exp(idat_dir, extended = TRUE)

# Getting the mSet, rawMSet
mSet <- preprocessRaw(rgSet)
rawMSet <-preprocessRaw(rgSet)

# Adding fake pheno data
n_samples <- ncol(mSet)
fake_pheno_data <- data.frame(
  Sample = colnames(mSet),
  Plate = sample(c("Plate1", "Plate2", "Plate3"), n_samples, replace = TRUE),
  Batch = sample(c("Batch1", "Batch2"), n_samples, replace = TRUE),
  Array = sample(paste0("Array", 1:8), n_samples, replace = TRUE),
  Sex = sample(c("M", "F"), n_samples, replace = TRUE),
  Age = sample(20:80, n_samples, replace = TRUE)
)

# !! Imported but commented out to avoid doing it twice
# Add the fake phenotype data to mSet and rgSet
# pData(mSet) <- cbind(pData(mSet), fake_pheno_data)
# pData(rgSet) <- cbind(pData(rgSet), fake_pheno_data)
# pData(rawMSet) <- cbind(pData(rawMSet), fake_pheno_data)


palette <- c("#E51E32FF", "#7E2B8EFF", "#059CCDFF", "#FF782AFF",  "#2CA030FF", "#C7519CFF", "#E2CF04FF" , "#3F64CEFF" )

sample_identifier_column = "Sample"


###############################################################################


# Sample QC
###############################################################################

# Get all QC Results
QC_results <- get_sample_QC_results(idat_dir, rgSet, mSet=NULL, log2intensity_threshold=10.5,
                                  detP_threshold=0.005, bscon_threshold=80)
# Unpack
QC_passfail <- QC_results$passed_QC
QC_result_vals <- QC_results$QC_result_values

# Plot QC Results
log2_QC_plot <- plot_log2_intensity_results(QC_result_vals, QC_passfail, rgSet, 
                                        sample_identifier_column, threshold=10.5, color_by=NULL, label_by=NULL)

detP_QC_plot <- plot_avg_detection_p_values(QC_result_vals, QC_passfail, rgSet, 
                                        sample_identifier_column, threshold=0.005, color_by=NULL, label_by=NULL)
  
bscon_QC_plot <- plot_bscon(QC_result_vals, QC_passfail, rgSet, 
                            sample_identifier_column, color_by=NULL, label_by=NULL, threshold=80)

# Separate from main QC, but valuable
sex_cross_check_plot <- plot_sex_cross_check(mSet, sample_identifier_column, palette)

# Also separate from main QC, do the FDR stuff
fdr_results <- get_fdr_results(mSet)
fdr_result_plot <- plot_fdr_results(fdr_results)


# Visualize the Data
###############################################################################

initial_beta_plot <- plot_beta_distribution(mSet, sample_identifier_column, color_by="Array")

pca_data <- get_PCA_results(rgSet)
initial_PCA_plot <- plot_PCA(pca_data, mSet, x=1, y=2, color_by ="Plate", label_by="Sex")


# Do Quantro, then FunNorm
###############################################################################

# First you have to set the phenotype variables to assess
phenotype_variables <- c("Batch", "Array", "Plate", "Sex")

anova_pvals_df <- run_quantro_anovatest_across_variables(mSet, phenotype_variables)
perm_pvals_df <- run_quantro_permtest_across_variables(mSet, phenotype_variables, num_permutations = 100)

# If justified, perform funnorm
grSet <- perform_Funnorm(rgSet, sex_adjustment=TRUE, sex_column="Sex")

# You may wish to reassess the beta distribution
post_funnorm_beta_plot <- plot_beta_distribution(grSet, sample_identifier_column, color_by="Sex")

print(initial_beta_plot) # For comparison

# Perform Probe Filtering
###############################################################################

grSet_filtered <- perform_probe_filtering(grSet, rgSet, rgSet_extended, "850k")

post_filtering_beta_plot <- plot_beta_distribution(grSet_filtered, sample_identifier_column, color_by="Sex")

# Perform BMIQ Normalization
###############################################################################
filtered_normalized_betas_3 <- probe_type_normalization_BMIQ(grSet_filtered, do_parallel = TRUE)

pheno <- pData(grSet_filtered)


# Ideally this can take in a beta matrix
post_BMIQ_beta_plot <- plot_beta_distribution(filtered_normalized_betas_3, sample_identifier_column, pheno_data=pheno, color_by="Batch")

